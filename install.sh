#!/usr/bin/env bash

# Script to install Emacs on (hopefully) any system without root privileges.
# It uses Nix (package manager)
# https://github.com/nix-community/nix-user-chroot
# This thing was tested on Ubuntu
# Warning: This script will change your $PATH on ~/.bashrc
# Uninstall nix:
# chmod -R u+rw ~/.nix && rm -rf ~/.nix ~/.nix-profile ~/.nix-defexpr/ ~/.nix-channels ~/.local/bin/nix-user-chroot

DIR=~/.nix
CHROOTDIR=~/.local/bin

# Color variables
RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
NC="\033[0m"
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# Functions
function runNix {
    # Run a command inside Nix environment. No need for quotes
    local command=$*
    echo $command | nix-user-chroot ~/.nix bash -l
}

function askYesNo {
    # Return 1 for true or 0 for false
    # Arguments: <Message> <default value (true | false)>
    local QUESTION=$1
    local DEFAULT=$2
    local INPUT
    if [ "$DEFAULT" = true ]; then
            OPTIONS="[Y/n]"
            DEFAULT="y"
        elif [ "$DEFAULT" = false ]; then
            OPTIONS="[y/N]"
            DEFAULT="n"
    else
	local OPTIONS="[y/n]"
	DEFAULT="none"
    fi
    read -p "$QUESTION $OPTIONS " -n 1 -s -r INPUT
    #If $INPUT is empty, use $DEFAULT
    INPUT=${INPUT:-${DEFAULT}}
    echo ${INPUT}
    if [[ "$INPUT" =~ ^[yY]$ ]]; then
        return 1
        elif [[ "$INPUT" =~ ^[nN]$ ]]; then
        return 0
    else
	echo "Error. Type \"y\" or \"n\""
	askYesNo "$1" "$2"
    fi
}

function genDesktopFile {
    # Takes the .desktop filename (without the extension) and generates a
    # .desktop file that can be used on the standard user environment.
    # The .desktop file must be generated by Nix
    local name=$1
    local sufix="${name}-nix"
    local binPath=$(echo "which ${name}" | nix-user-chroot ~/.nix bash -l)
    runNix cp ~/.nix-profile/share/applications/${name}.desktop ~/.local/share/applications/${sufix}.desktop
    chmod u+rw ~/.local/share/applications/${sufix}.desktop
    echo "nix-user-chroot ~/.nix ${binPath}" > ~/.local/share/applications/${sufix}.sh
    chmod u+x ~/.local/share/applications/${sufix}.sh
    sed -Ei 's|^Exec=.*|Exec='"${HOME}/.local/share/applications/${sufix}"'.sh|' ~/.local/share/applications/${sufix}.desktop
    mkdir -p ~/.local/share/icons/
    runNix cp ~/.nix-profile/share/icons/hicolor/scalable/apps/${name}.svg ~/.local/share/icons/${name}.svg
    sed -Ei 's|^Icon=.*|Icon='"${HOME}/.local/share/icons/${name}"'.svg|' ~/.local/share/applications/${sufix}.desktop
}

#### Checking the system #####

if ! ([[ $(unshare --user --pid echo YES) = "YES" ]] || [[ $(echo -n "$( zgrep CONFIG_USER_NS /proc/config.gz )" | tail -c 1) = 'y' ]] || [[ $(echo -n "$( grep CONFIG_USER_NS /boot/config-$(uname -r) )" | tail -c 1) = 'y' ]]); then
    echo "The kernel does not support user namespaces. Installation failed."
    exit
fi

# Check if all required packages are installed
reqpkg=(curl grep awk wget unzip sed) ;
installed_pkg=( $(which ${reqpkg[@]} | awk -F/ '{ print $NF }') )
if [ "${installed_pkg[*]}" != "${reqpkg[*]}" ]; then
    # Array subtraction
    diff(){
	awk 'BEGIN{RS=ORS=" "}
       {NR==FNR?a[$0]++:a[$0]--}
       END{for(k in a)if(a[k])print k}' <(echo -n "${!1}") <(echo -n "${!2}")
    }
    #reqpkg - installed_pkg
    not_installed_pkg=($(diff reqpkg[@] installed_pkg[@]))
    echo -e "${RED}The following packages were not found in your system:${NC} ${not_installed_pkg[@]}"
    echo "Please, install them and try again."
    exit
fi

echo "The installation will be performaned on $DIR and $CHROOTDIR"
askYesNo "Continue?" true
if [ $? -eq 0 ]; then
    echo "The installation was canceled."
    exit
fi

#### Instalation ####

# Downloading the lastest nix-user-chroot realease from github. (May break if the release name changes)
curl -s https://api.github.com/repos/nix-community/nix-user-chroot/releases/latest |
    grep "tag_name" |
    awk '{print "https://github.com/nix-community/nix-user-chroot/releases/download/" substr($2, 2, length($2)-3) "/nix-user-chroot-bin-" substr($2, 2, length($2)-3) "-x86_64-unknown-linux-musl"}' |
    wget -i - -O nix-user-chroot
# Check if file exists and it's size to be sure it isn't an empty file
if [[ (! -e ./nix-user-chroot) || ($(du --apparent-size --block-size=1 "nix-user-chroot" | awk '{ print $1}') -le 1) ]]; then
    echo "It was not possible to retrieve the nix-user-chroot binary."
    exit
fi
chmod u+x ./nix-user-chroot
mkdir -p $CHROOTDIR
mv ./nix-user-chroot $CHROOTDIR
if [[ ! "$PATH" = *$(echo $CHROOTDIR)* ]]; then
    echo "Updating \$PATH..."
    echo -e "\nexport PATH=$CHROOTDIR:\$PATH" >> ~/.bashrc
    PATH=$CHROOTDIR:$PATH
    echo "${BLUE}It is recommended to restart your terminal emulator or source ~/.bashrc to changes take effect!${NC}"
fi

# Installing Nix
mkdir -m 0755 ~/.nix
nix-user-chroot ~/.nix bash -c "curl -L https://nixos.org/nix/install | bash"
# Installing packages inside nix-chroot
nix-user-chroot ~/.nix bash -l <<"EOT"
nix-env -iA nixpkgs.emacs
EOT
echo "alias nix-shell='nix-user-chroot ${DIR} bash -l'" >> ~/.bashrc
alias nix-shell='nix-user-chroot ${DIR} bash -l'

# Fonts
echo -e "${BLUE}Installing fonts...${NC}"
fonts_dir="${HOME}/.local/share/fonts"
if [ ! -d "${fonts_dir}" ]; then
    echo "mkdir -p $fonts_dir"
    mkdir -p "${fonts_dir}"
fi
version=5.2
zip=Fira_Code_v${version}.zip
curl --fail --location --show-error https://github.com/tonsky/FiraCode/releases/download/${version}/${zip} --output ${zip}
unzip -o -q -d ${fonts_dir} ${zip}
rm ${zip}
rm ~/.local/share/fonts/{README.txt,specimen.html}
fc-cache -f

# Installing clangd
wget https://github.com/clangd/clangd/releases/download/15.0.3/clangd-linux-15.0.3.zip -O ~/.local/clangd.zip
unzip ~/.local/clangd.zip -d ~/.local/
cp -arf ~/.local/clangd_15.0.3/** ~/.local/
rm ~/.local/clangd.zip
rm -rf ~/.local/clangd_15.0.3/

#### Other configs ####

# Emacs config
mkdir -p ~/.emacs.d/snippets/cc-mode/
curl -s -L https://raw.githubusercontent.com/ThwyIgo/dotfiles/main/.emacs.d/init.el > ~/.emacs.d/init.el
curl -s -L https://raw.githubusercontent.com/ThwyIgo/dotfiles/main/.emacs.d/snippets/cc-mode/forij > ~/.emacs.d/snippets/cc-mode/forij
curl -s -L https://raw.githubusercontent.com/ThwyIgo/dotfiles/main/.emacs.d/snippets/cc-mode/malloccast > ~/.emacs.d/snippets/cc-mode/malloccast
curl -s -L https://raw.githubusercontent.com/ThwyIgo/dotfiles/main/.emacs.d/snippets/cc-mode/realloc > ~/.emacs.d/snippets/cc-mode/realloc
genDesktopFile "emacs"
echo "alias emacs-nix='runNix.sh env XMODIFIERS= emacs -q -l ~/.emacs.d/init.el'" >> ~/.bashrc

# Clean script
curl -s -L https://raw.githubusercontent.com/ThwyIgo/portable-environment/main/clean.sh > $CHROOTDIR/cleanNix.sh
echo -e "\nrm ${CHROOTDIR}/cleanNix.sh" >> $CHROOTDIR/cleanNix.sh
chmod u+x $CHROOTDIR/cleanNix.sh

# runNix script
## Usage: runNix <command to be ran inside nix-chroot>
curl -s -L https://raw.githubusercontent.com/ThwyIgo/portable-environment/main/runNix.sh > $CHROOTDIR/runNix.sh
chmod u+x $CHROOTDIR/runNix.sh

#### Finishing up ####
runNix.sh env XMODIFIERS= emacs -q -l ~/.emacs.d/init.el &
echo -e "${GREEN}To enter nix env, type 'nix-user-chroot ${DIR} bash -l'${NC}"
echo -e "To remove Nix, type 'cleanNix.sh' after sourcing ~/.bashrc or restarting your terminal emulator"

exit
# runNix.sh . /home/thiago/.nix-profile/etc/profile.d/nix.sh